{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.23.1.45101",
      "templateHash": "73387072568192305"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location all resources will be deployed to"
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "ticket",
      "metadata": {
        "description": "A prefix to add to the start of all resource names. Note: A \"unique\" suffix will also be added"
      }
    },
    "workflow": {
      "type": "string",
      "defaultValue": "emailtoazdo-nomove",
      "allowedValues": [
        "emailtoazdo-withmove",
        "emailtoazdo-nomove"
      ],
      "metadata": {
        "description": "Which variant of the logic app to deploy. \"-withmove\" will move the email once processed, \"-nomove\" will leave the email as-is"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all deployed resources"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
          "Call_Azure_OpenAI_Chat_Completions": {
            "inputs": {
              "authentication": {
                "audience": "https://cognitiveservices.azure.com",
                "type": "ManagedServiceIdentity"
              },
              "body": "@outputs('Compose_Chat_Completion')",
              "method": "POST",
              "uri": "https://demoopenai1562e13.openai.azure.com/openai/deployments/gpt-35-turbo/chat/completions?api-version=2023-08-01-preview"
            },
            "runAfter": {
              "Compose_Chat_Completion": [
                "Succeeded"
              ]
            },
            "type": "Http"
          },
          "Compose_Chat_Completion": {
            "inputs": {
              "max_tokens": 800,
              "messages": [
                {
                  "content": "@{variables('Prompt')}",
                  "role": "system"
                },
                {
                  "content": "Recieved: @{triggerBody()?['receivedDateTime']}\nFrom: @{triggerBody()?['from']}\nSubject: @{triggerBody()?['subject']}\nContent:\n @{triggerBody()?['body']}",
                  "role": "user"
                }
              ],
              "temperature": 0,
              "user": "@{triggerBody()?['from']}"
            },
            "runAfter": {
              "Initialize_Prompt": [
                "Succeeded"
              ]
            },
            "type": "Compose"
          },
          "Create_a_work_item": {
            "inputs": {
              "body": {
                "description": "<p>@{triggerBody()?['body']}</p>",
                "title": "@body('Parse_Azure_OpenAI_Reponse')?['summary']",
                "userEnteredFields": {
                  "Details": "@triggerBody()?['body']",
                  "Error Severity": "@body('Parse_Azure_OpenAI_Reponse')?['severity']",
                  "Error Source": "@body('Parse_Azure_OpenAI_Reponse')?['potentialErrorSource']",
                  "Errors Reported": "@body('Parse_Azure_OpenAI_Reponse')?['errorsReported']",
                  "Reported At": "@body('Parse_Azure_OpenAI_Reponse')?['receivedDate']",
                  "Reported By": "@body('Parse_Azure_OpenAI_Reponse')?['reportedBy']",
                  "Solution Proposal": "@body('Parse_Azure_OpenAI_Reponse')?['solutionProposal']"
                }
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['visualstudioteamservices']['connectionId']"
                }
              },
              "method": "patch",
              "path": "/@{encodeURIComponent('AI Xplore Demo')}/_apis/wit/workitems/$Bug",
              "queries": {
                "account": "scholden"
              }
            },
            "runAfter": {
              "Parse_Azure_OpenAI_Reponse": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "Initialize_Prompt": {
            "inputs": {
              "variables": [
                {
                  "name": "Prompt",
                  "type": "string",
                  "value": "You are an AI assistant that helps a helpdesk analyst who is triaging incident reports received as email by creating a structured JSON containing essential information about the incident using the following rules: \n- Indicate if it is a high priority issue using a \"Crtitical\" tag as a prefix. \n- Indicate if it is a medium priority issue using a \"Medium\" tag as a prefix. \n- Indicate if it is a low priority issue using a \"Low\" tag as a prefix. \n- Indicate if it is a non-tech issue using a \"Non-Tech\" tag as a prefix. \n- create a one-line summary of the incident. Where possible, the summary should include a phrase that indicates the problem area. \n- do your best to identify a category that is relevant to the incident. For example: IT outage, request-for-information, facilities etc. \n- identify the reporter of the incident. Use \\\"UNKNOWN\\\" if you cannot identify the reporter. \n- do your best to consolidate as plain text any error details and stack trace reported in the incident \n- do your best to summarise as text the technical errors reported in the incident \n- do your best to identify a remedial course of action \nThe structured JSON output should follow these mapping rules: \n- reported date as receivedDate \n- reporter as reportedBy, \n- summary as summary, \n- category as category, \n- prefix as severity, \n- email body as details, \n- consolidated errors as errorsReported, \n- technical errors as potentialErrorSource, \n- remedial course of action as solutionProposal. \nReturn only the structured JSON and nothing else."
                }
              ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
          },
          "Move_email_(V2)": {
            "inputs": {
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['office365']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/Mail/Move/@{encodeURIComponent(triggerBody()?['id'])}",
              "queries": {
                "folderPath": "Id::AQMkADU0ZjcwMzI2LTNmZTctNGIyOC05Mjk1LTcyZDdlMTQ0ADFkMmMALgAAA13HACcQqtRBrDYVE_vHBNcBAMasTphwXvJOtwBlVIKtXGYAAAJiUAAAAA=="
              }
            },
            "metadata": {
              "Id::AQMkADU0ZjcwMzI2LTNmZTctNGIyOC05Mjk1LTcyZDdlMTQ0ADFkMmMALgAAA13HACcQqtRBrDYVE_vHBNcBAMasTphwXvJOtwBlVIKtXGYAAAJiUAAAAA==": "Processed"
            },
            "runAfter": {
              "Create_a_work_item": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "Parse_Azure_OpenAI_Reponse": {
            "inputs": {
              "content": "@body('Call_Azure_OpenAI_Chat_Completions')['choices'][0]['message']['content']",
              "schema": {
                "properties": {
                  "details": {
                    "type": "string"
                  },
                  "errorsReported": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "incidentNo": {
                    "type": "string"
                  },
                  "potentialErrorSource": {
                    "type": "string"
                  },
                  "receivedDate": {
                    "type": "string"
                  },
                  "reportedBy": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string"
                  },
                  "solutionProposal": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "Call_Azure_OpenAI_Chat_Completions": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
          "$connections": {
            "defaultValue": {},
            "type": "Object"
          }
        },
        "triggers": {
          "When_a_new_email_arrives_(V3)": {
            "inputs": {
              "fetch": {
                "method": "get",
                "pathTemplate": {
                  "template": "/v3/Mail/OnNewEmail"
                },
                "queries": {
                  "fetchOnlyWithAttachment": false,
                  "folderPath": "Inbox",
                  "importance": "Any",
                  "includeAttachments": false
                }
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['office365']['connectionId']"
                }
              },
              "subscribe": {
                "body": {
                  "NotificationUrl": "@{listCallbackUrl()}"
                },
                "method": "post",
                "pathTemplate": {
                  "template": "/GraphMailSubscriptionPoke/$subscriptions"
                },
                "queries": {
                  "fetchOnlyWithAttachment": false,
                  "folderPath": "Inbox",
                  "importance": "Any"
                }
              }
            },
            "splitOn": "@triggerBody()?['value']",
            "type": "ApiConnectionNotification"
          }
        }
      }
    },
    "$fxv#1": {
      "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
          "Call_Azure_OpenAI_Chat_Completions": {
            "inputs": {
              "authentication": {
                "audience": "https://cognitiveservices.azure.com",
                "type": "ManagedServiceIdentity"
              },
              "body": "@outputs('Compose_Chat_Completion')",
              "method": "POST",
              "uri": "https://demoopenai1562e13.openai.azure.com/openai/deployments/gpt-35-turbo/chat/completions?api-version=2023-08-01-preview"
            },
            "runAfter": {
              "Compose_Chat_Completion": [
                "Succeeded"
              ]
            },
            "type": "Http"
          },
          "Compose_Chat_Completion": {
            "inputs": {
              "max_tokens": 800,
              "messages": [
                {
                  "content": "@{variables('Prompt')}",
                  "role": "system"
                },
                {
                  "content": "Recieved: @{triggerBody()?['receivedDateTime']}\nFrom: @{triggerBody()?['from']}\nSubject: @{triggerBody()?['subject']}\nContent:\n @{triggerBody()?['body']}",
                  "role": "user"
                }
              ],
              "temperature": 0,
              "user": "@{triggerBody()?['from']}"
            },
            "runAfter": {
              "Initialize_Prompt": [
                "Succeeded"
              ]
            },
            "type": "Compose"
          },
          "Create_a_work_item": {
            "inputs": {
              "body": {
                "description": "<p>@{triggerBody()?['body']}</p>",
                "title": "@body('Parse_Azure_OpenAI_Reponse')?['summary']",
                "userEnteredFields": {
                  "Details": "@triggerBody()?['body']",
                  "Error Severity": "@body('Parse_Azure_OpenAI_Reponse')?['severity']",
                  "Error Source": "@body('Parse_Azure_OpenAI_Reponse')?['potentialErrorSource']",
                  "Errors Reported": "@body('Parse_Azure_OpenAI_Reponse')?['errorsReported']",
                  "Reported At": "@body('Parse_Azure_OpenAI_Reponse')?['receivedDate']",
                  "Reported By": "@body('Parse_Azure_OpenAI_Reponse')?['reportedBy']",
                  "Solution Proposal": "@body('Parse_Azure_OpenAI_Reponse')?['solutionProposal']"
                }
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['visualstudioteamservices']['connectionId']"
                }
              },
              "method": "patch",
              "path": "/@{encodeURIComponent('AI Xplore Demo')}/_apis/wit/workitems/$Bug",
              "queries": {
                "account": "scholden"
              }
            },
            "runAfter": {
              "Parse_Azure_OpenAI_Reponse": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "Initialize_Prompt": {
            "inputs": {
              "variables": [
                {
                  "name": "Prompt",
                  "type": "string",
                  "value": "You are an AI assistant that helps a helpdesk analyst who is triaging incident reports received as email by creating a structured JSON containing essential information about the incident using the following rules: \n- Indicate if it is a high priority issue using a \"Crtitical\" tag as a prefix. \n- Indicate if it is a medium priority issue using a \"Medium\" tag as a prefix. \n- Indicate if it is a low priority issue using a \"Low\" tag as a prefix. \n- Indicate if it is a non-tech issue using a \"Non-Tech\" tag as a prefix. \n- create a one-line summary of the incident. Where possible, the summary should include a phrase that indicates the problem area. \n- do your best to identify a category that is relevant to the incident. For example: IT outage, request-for-information, facilities etc. \n- identify the reporter of the incident. Use \\\"UNKNOWN\\\" if you cannot identify the reporter. \n- do your best to consolidate as plain text any error details and stack trace reported in the incident \n- do your best to summarise as text the technical errors reported in the incident \n- do your best to identify a remedial course of action \nThe structured JSON output should follow these mapping rules: \n- reported date as receivedDate \n- reporter as reportedBy, \n- summary as summary, \n- category as category, \n- prefix as severity, \n- email body as details, \n- consolidated errors as errorsReported, \n- technical errors as potentialErrorSource, \n- remedial course of action as solutionProposal. \nReturn only the structured JSON and nothing else."
                }
              ]
            },
            "runAfter": {},
            "type": "InitializeVariable"
          },
          "Parse_Azure_OpenAI_Reponse": {
            "inputs": {
              "content": "@body('Call_Azure_OpenAI_Chat_Completions')['choices'][0]['message']['content']",
              "schema": {
                "properties": {
                  "details": {
                    "type": "string"
                  },
                  "errorsReported": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "incidentNo": {
                    "type": "string"
                  },
                  "potentialErrorSource": {
                    "type": "string"
                  },
                  "receivedDate": {
                    "type": "string"
                  },
                  "reportedBy": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string"
                  },
                  "solutionProposal": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "Call_Azure_OpenAI_Chat_Completions": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
          "$connections": {
            "defaultValue": {},
            "type": "Object"
          }
        },
        "triggers": {
          "When_a_new_email_arrives_(V3)": {
            "inputs": {
              "fetch": {
                "method": "get",
                "pathTemplate": {
                  "template": "/v3/Mail/OnNewEmail"
                },
                "queries": {
                  "fetchOnlyWithAttachment": false,
                  "folderPath": "Inbox",
                  "importance": "Any",
                  "includeAttachments": false
                }
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['office365']['connectionId']"
                }
              },
              "subscribe": {
                "body": {
                  "NotificationUrl": "@{listCallbackUrl()}"
                },
                "method": "post",
                "pathTemplate": {
                  "template": "/GraphMailSubscriptionPoke/$subscriptions"
                },
                "queries": {
                  "fetchOnlyWithAttachment": false,
                  "folderPath": "Inbox",
                  "importance": "Any"
                }
              }
            },
            "splitOn": "@triggerBody()?['value']",
            "type": "ApiConnectionNotification"
          }
        }
      }
    },
    "workflowDefinition": "[if(equals(parameters('workflow'), 'emailtoazdo-nomove'), variables('$fxv#0').definition, variables('$fxv#1').definition)]",
    "strippedLocation": "[replace(toLower(parameters('location')), ' ', '')]",
    "uniqueNameFormat": "[format('{0}-{{0}}-{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('prefix')))]"
  },
  "resources": [
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', format(variables('uniqueNameFormat'), 'openai'), 'gpt-35-turbo-16k')]",
      "sku": {
        "name": "Standard",
        "capacity": 20
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "gpt-35-turbo-16k"
        },
        "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', format(variables('uniqueNameFormat'), 'openai'))]"
      ]
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[format(variables('uniqueNameFormat'), 'openai')]",
      "location": "[parameters('location')]",
      "kind": "OpenAI",
      "sku": {
        "name": "S0"
      },
      "properties": {
        "customSubDomainName": "[format(variables('uniqueNameFormat'), 'openai')]"
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format(variables('uniqueNameFormat'), 'openai'))]",
      "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', format(variables('uniqueNameFormat'), 'openai')), resourceId('Microsoft.Logic/workflows', format('{0}-logicapp', parameters('prefix'))))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
        "principalId": "[reference(resourceId('Microsoft.Logic/workflows', format('{0}-logicapp', parameters('prefix'))), '2019-05-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', format('{0}-logicapp', parameters('prefix')))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', format(variables('uniqueNameFormat'), 'openai'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('{0}-azuredevops', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "visualstudioteamservices",
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('strippedLocation'), 'visualstudioteamservices')]"
        }
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('{0}-office365', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "office365",
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('strippedLocation'), 'office365')]"
        }
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('{0}-logicapp', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "definition": "[variables('workflowDefinition')]",
        "parameters": {
          "$connections": {
            "value": {
              "office365": {
                "connectionId": "[resourceId('Microsoft.Web/connections', format('{0}-office365', parameters('prefix')))]",
                "connectionName": "office365",
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('strippedLocation'), 'office365')]"
              },
              "visualstudioteamservices": {
                "connectionId": "[resourceId('Microsoft.Web/connections', format('{0}-azuredevops', parameters('prefix')))]",
                "connectionName": "visualstudioteamservices",
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('strippedLocation'), 'visualstudioteamservices')]"
              }
            }
          }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('{0}-azuredevops', parameters('prefix')))]",
        "[resourceId('Microsoft.Web/connections', format('{0}-office365', parameters('prefix')))]"
      ]
    }
  ]
}